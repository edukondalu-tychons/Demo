require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const validator = require('validator');
const winston = require('winston');

const app = express();
const PORT = process.env.PORT || 5000;

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}

const requiredEnv = ['EMAIL_HOST', 'EMAIL_PORT', 'EMAIL_USER', 'EMAIL_PASS', 'EMAIL_TO'];
const missingEnv = requiredEnv.filter(env => !process.env[env]);
if (missingEnv.length) {
  logger.error(`Missing environment variables: ${missingEnv.join(', ')}`);
  process.exit(1);
}

app.use(cors());
app.use(express.json());

app.use('/send-email', rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests, please try again later.'
}));

app.get('/health', (req, res) => {
  logger.info('Health check accessed');
  res.status(200).json({ status: 'OK', message: 'Server is running' });
});

app.post('/send-email', async (req, res) => {
  const { firstName, lastName, contactPhone, contactEmail, description } = req.body;

  if (!firstName || !lastName || !contactPhone || !contactEmail) {
    logger.warn('Missing required fields in send-email request');
    return res.status(400).json({ message: 'Missing required fields' });
  }

  if (!validator.isMobilePhone(contactPhone, 'any', { strictMode: false })) {
    logger.warn(`Invalid phone number format: ${contactPhone}`);
    return res.status(400).json({ message: 'Invalid phone number format' });
  }

  if (!validator.isEmail(contactEmail)) {
    logger.warn(`Invalid email address: ${contactEmail}`);
    return res.status(400).json({ message: 'Invalid email address' });
  }

  if (description && description.length > 500) {
    logger.warn('Description exceeds 500 characters');
    return res.status(400).json({ message: 'Description must be less than 500 characters' });
  }

  try {
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST,
      port: parseInt(process.env.EMAIL_PORT),
      secure: process.env.EMAIL_PORT === '465',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    await transporter.verify();

    const formattedDescription = description ? description.replace(/\n/g, '<br>') : '—';

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_TO,
      subject: 'Contact Form',
      html: `
        <div style="background-color: #f4f6f8; padding: 40px 0; font-family: 'Segoe UI', sans-serif;">
          <div style="max-width: 600px; margin: auto; background: #ffffff; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 30px;">
            <div style="text-align: center; margin-bottom: 30px;">
              <h2 style="color: #2b6cb0; margin: 0;">New Contact Form Submission</h2>
              <p style="color: #555; font-size: 14px;">You’ve received a new inquiry from your website.</p>
            </div>
            <table style="width: 100%; border-collapse: collapse; font-size: 16px;">
              <tr>
                <td style="padding: 12px 8px; font-weight: 600; background: #f0f4f8;">First Name:</td>
                <td style="padding: 12px 8px;">${firstName}</td>
              </tr>
              <tr>
                <td style="padding: 12px 8px; font-weight: 600; background: #f0f4f8;">Last Name:</td>
                <td style="padding: 12px 8px;">${lastName}</td>
              </tr>
              <tr>
                <td style="padding: 12px 8px; font-weight: 600; background: #f0f4f8;">Phone Number:</td>
                <td style="padding: 12px 8px;">${contactPhone}</td>
              </tr>
              <tr>
                <td style="padding: 12px 8px; font-weight: 600; background: #f0f4f8;">Email Address:</td>
                <td style="padding: 12px 8px;">${contactEmail}</td>
              </tr>
              <tr>
                <td style="padding: 12px 8px; font-weight: 600; background: #f0f4f8;">Description:</td>
                <td style="padding: 12px 8px;">${formattedDescription}</td>
              </tr>
            </table>
            <div style="text-align: center; color: #999; font-size: 13px; margin-top: 40px;">
              <p>This message was automatically generated by your website contact form.</p>
            </div>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);
    logger.info(`Email sent to ${process.env.EMAIL_TO} from ${contactEmail}`);
    res.status(200).json({ message: 'Email sent successfully' });

  } catch (error) {
    logger.error(`Failed to send email: ${error.message}`);
    res.status(500).json({ message: 'Failed to send email' });
  }
});

app.listen(PORT, () => {
  logger.info(`Server is running on http://localhost:${PORT}`);
});